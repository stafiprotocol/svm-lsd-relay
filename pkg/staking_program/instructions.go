// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package staking_program

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "StakingProgram"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_InitializeStakingPool = ag_binary.TypeID([8]byte{231, 155, 216, 76, 185, 211, 34, 151})

	Instruction_TransferAdmin = ag_binary.TypeID([8]byte{42, 242, 66, 106, 228, 10, 111, 156})

	Instruction_AcceptAdmin = ag_binary.TypeID([8]byte{112, 42, 45, 90, 116, 181, 13, 170})

	Instruction_Config = ag_binary.TypeID([8]byte{173, 245, 21, 220, 175, 33, 9, 35})

	Instruction_AddRewards = ag_binary.TypeID([8]byte{88, 186, 25, 227, 38, 137, 81, 23})

	Instruction_Stake = ag_binary.TypeID([8]byte{206, 176, 202, 18, 200, 209, 179, 108})

	Instruction_Unstake = ag_binary.TypeID([8]byte{90, 95, 107, 42, 205, 124, 50, 225})

	Instruction_Withdraw = ag_binary.TypeID([8]byte{183, 18, 70, 156, 148, 109, 161, 34})

	Instruction_Claim = ag_binary.TypeID([8]byte{62, 198, 214, 193, 213, 159, 108, 210})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_InitializeStakingPool:
		return "InitializeStakingPool"
	case Instruction_TransferAdmin:
		return "TransferAdmin"
	case Instruction_AcceptAdmin:
		return "AcceptAdmin"
	case Instruction_Config:
		return "Config"
	case Instruction_AddRewards:
		return "AddRewards"
	case Instruction_Stake:
		return "Stake"
	case Instruction_Unstake:
		return "Unstake"
	case Instruction_Withdraw:
		return "Withdraw"
	case Instruction_Claim:
		return "Claim"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"initialize_staking_pool", (*InitializeStakingPool)(nil),
		},
		{
			"transfer_admin", (*TransferAdmin)(nil),
		},
		{
			"accept_admin", (*AcceptAdmin)(nil),
		},
		{
			"config", (*Config)(nil),
		},
		{
			"add_rewards", (*AddRewards)(nil),
		},
		{
			"stake", (*Stake)(nil),
		},
		{
			"unstake", (*Unstake)(nil),
		},
		{
			"withdraw", (*Withdraw)(nil),
		},
		{
			"claim", (*Claim)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
