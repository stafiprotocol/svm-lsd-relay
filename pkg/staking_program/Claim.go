// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package staking_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Claim is the `claim` instruction.
type Claim struct {
	Restake *bool

	// [0] = [SIGNER] user
	//
	// [1] = [WRITE, SIGNER] rentPayer
	//
	// [2] = [WRITE] stakingPool
	//
	// [3] = [WRITE] stakeAccount
	//
	// [4] = [] tokenMint
	//
	// [5] = [WRITE] userTokenAccount
	//
	// [6] = [WRITE] poolTokenAccount
	//
	// [7] = [] tokenProgram
	//
	// [8] = [] associatedTokenProgram
	//
	// [9] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimInstructionBuilder creates a new `Claim` instruction builder.
func NewClaimInstructionBuilder() *Claim {
	nd := &Claim{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetRestake sets the "restake" parameter.
func (inst *Claim) SetRestake(restake bool) *Claim {
	inst.Restake = &restake
	return inst
}

// SetUserAccount sets the "user" account.
func (inst *Claim) SetUserAccount(user ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *Claim) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRentPayerAccount sets the "rentPayer" account.
func (inst *Claim) SetRentPayerAccount(rentPayer ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(rentPayer).WRITE().SIGNER()
	return inst
}

// GetRentPayerAccount gets the "rentPayer" account.
func (inst *Claim) GetRentPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetStakingPoolAccount sets the "stakingPool" account.
func (inst *Claim) SetStakingPoolAccount(stakingPool ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(stakingPool).WRITE()
	return inst
}

// GetStakingPoolAccount gets the "stakingPool" account.
func (inst *Claim) GetStakingPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetStakeAccountAccount sets the "stakeAccount" account.
func (inst *Claim) SetStakeAccountAccount(stakeAccount ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(stakeAccount).WRITE()
	return inst
}

// GetStakeAccountAccount gets the "stakeAccount" account.
func (inst *Claim) GetStakeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenMintAccount sets the "tokenMint" account.
func (inst *Claim) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenMint)
	return inst
}

// GetTokenMintAccount gets the "tokenMint" account.
func (inst *Claim) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserTokenAccountAccount sets the "userTokenAccount" account.
func (inst *Claim) SetUserTokenAccountAccount(userTokenAccount ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(userTokenAccount).WRITE()
	return inst
}

// GetUserTokenAccountAccount gets the "userTokenAccount" account.
func (inst *Claim) GetUserTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPoolTokenAccountAccount sets the "poolTokenAccount" account.
func (inst *Claim) SetPoolTokenAccountAccount(poolTokenAccount ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(poolTokenAccount).WRITE()
	return inst
}

// GetPoolTokenAccountAccount gets the "poolTokenAccount" account.
func (inst *Claim) GetPoolTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Claim) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Claim) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *Claim) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *Claim) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Claim) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Claim) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst Claim) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Claim,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Claim) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Claim) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Restake == nil {
			return errors.New("Restake parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.RentPayer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.StakingPool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.StakeAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.UserTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PoolTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *Claim) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Claim")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Restake", *inst.Restake))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                  user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             rentPayer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           stakingPool", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 stake", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("             tokenMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             userToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("             poolToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj Claim) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Restake` param:
	err = encoder.Encode(obj.Restake)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Claim) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Restake`:
	err = decoder.Decode(&obj.Restake)
	if err != nil {
		return err
	}
	return nil
}

// NewClaimInstruction declares a new Claim instruction with the provided parameters and accounts.
func NewClaimInstruction(
	// Parameters:
	restake bool,
	// Accounts:
	user ag_solanago.PublicKey,
	rentPayer ag_solanago.PublicKey,
	stakingPool ag_solanago.PublicKey,
	stakeAccount ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	userTokenAccount ag_solanago.PublicKey,
	poolTokenAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *Claim {
	return NewClaimInstructionBuilder().
		SetRestake(restake).
		SetUserAccount(user).
		SetRentPayerAccount(rentPayer).
		SetStakingPoolAccount(stakingPool).
		SetStakeAccountAccount(stakeAccount).
		SetTokenMintAccount(tokenMint).
		SetUserTokenAccountAccount(userTokenAccount).
		SetPoolTokenAccountAccount(poolTokenAccount).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram)
}
