// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package staking_program

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type StakingPool struct {
	Creator             ag_solanago.PublicKey
	Index               uint8
	Admin               ag_solanago.PublicKey
	PendingAdmin        ag_solanago.PublicKey
	PoolSeedBump        uint8
	TokenMint           ag_solanago.PublicKey
	MinStakeAmount      uint64
	UnbondingSeconds    uint64
	RewardRate          uint64
	RewardAlgorithm     RewardAlgorithm
	TotalStake          uint64
	TotalReward         uint64
	UndistributedReward uint64
	LastRewardTimestamp uint64
	RewardPerShare      ag_binary.Uint128

	// Reserved space for future upgrades. Do not use.
	Reserved [256]uint8
}

var StakingPoolDiscriminator = [8]byte{203, 19, 214, 220, 220, 154, 24, 102}

func (obj StakingPool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StakingPoolDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `PendingAdmin` param:
	err = encoder.Encode(obj.PendingAdmin)
	if err != nil {
		return err
	}
	// Serialize `PoolSeedBump` param:
	err = encoder.Encode(obj.PoolSeedBump)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `MinStakeAmount` param:
	err = encoder.Encode(obj.MinStakeAmount)
	if err != nil {
		return err
	}
	// Serialize `UnbondingSeconds` param:
	err = encoder.Encode(obj.UnbondingSeconds)
	if err != nil {
		return err
	}
	// Serialize `RewardRate` param:
	err = encoder.Encode(obj.RewardRate)
	if err != nil {
		return err
	}
	// Serialize `RewardAlgorithm` param:
	err = encoder.Encode(obj.RewardAlgorithm)
	if err != nil {
		return err
	}
	// Serialize `TotalStake` param:
	err = encoder.Encode(obj.TotalStake)
	if err != nil {
		return err
	}
	// Serialize `TotalReward` param:
	err = encoder.Encode(obj.TotalReward)
	if err != nil {
		return err
	}
	// Serialize `UndistributedReward` param:
	err = encoder.Encode(obj.UndistributedReward)
	if err != nil {
		return err
	}
	// Serialize `LastRewardTimestamp` param:
	err = encoder.Encode(obj.LastRewardTimestamp)
	if err != nil {
		return err
	}
	// Serialize `RewardPerShare` param:
	err = encoder.Encode(obj.RewardPerShare)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StakingPool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StakingPoolDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[203 19 214 220 220 154 24 102]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `PendingAdmin`:
	err = decoder.Decode(&obj.PendingAdmin)
	if err != nil {
		return err
	}
	// Deserialize `PoolSeedBump`:
	err = decoder.Decode(&obj.PoolSeedBump)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `MinStakeAmount`:
	err = decoder.Decode(&obj.MinStakeAmount)
	if err != nil {
		return err
	}
	// Deserialize `UnbondingSeconds`:
	err = decoder.Decode(&obj.UnbondingSeconds)
	if err != nil {
		return err
	}
	// Deserialize `RewardRate`:
	err = decoder.Decode(&obj.RewardRate)
	if err != nil {
		return err
	}
	// Deserialize `RewardAlgorithm`:
	err = decoder.Decode(&obj.RewardAlgorithm)
	if err != nil {
		return err
	}
	// Deserialize `TotalStake`:
	err = decoder.Decode(&obj.TotalStake)
	if err != nil {
		return err
	}
	// Deserialize `TotalReward`:
	err = decoder.Decode(&obj.TotalReward)
	if err != nil {
		return err
	}
	// Deserialize `UndistributedReward`:
	err = decoder.Decode(&obj.UndistributedReward)
	if err != nil {
		return err
	}
	// Deserialize `LastRewardTimestamp`:
	err = decoder.Decode(&obj.LastRewardTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `RewardPerShare`:
	err = decoder.Decode(&obj.RewardPerShare)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type StakeAccount struct {
	StakingPool ag_solanago.PublicKey
	User        ag_solanago.PublicKey
	Amount      uint64
	Reward      uint64
	RewardDebt  uint64

	// Reserved space for future upgrades. Do not use.
	Reserved [128]uint8
}

var StakeAccountDiscriminator = [8]byte{80, 158, 67, 124, 50, 189, 192, 255}

func (obj StakeAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StakeAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `StakingPool` param:
	err = encoder.Encode(obj.StakingPool)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Reward` param:
	err = encoder.Encode(obj.Reward)
	if err != nil {
		return err
	}
	// Serialize `RewardDebt` param:
	err = encoder.Encode(obj.RewardDebt)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StakeAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StakeAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[80 158 67 124 50 189 192 255]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `StakingPool`:
	err = decoder.Decode(&obj.StakingPool)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Reward`:
	err = decoder.Decode(&obj.Reward)
	if err != nil {
		return err
	}
	// Deserialize `RewardDebt`:
	err = decoder.Decode(&obj.RewardDebt)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type UnstakeAccount struct {
	StakingPool           ag_solanago.PublicKey
	User                  ag_solanago.PublicKey
	Amount                uint64
	WithdrawableTimestamp uint64

	// Reserved space for future upgrades. Do not use.
	Reserved [128]uint8
}

var UnstakeAccountDiscriminator = [8]byte{45, 203, 242, 225, 172, 87, 112, 71}

func (obj UnstakeAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UnstakeAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `StakingPool` param:
	err = encoder.Encode(obj.StakingPool)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `WithdrawableTimestamp` param:
	err = encoder.Encode(obj.WithdrawableTimestamp)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnstakeAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UnstakeAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[45 203 242 225 172 87 112 71]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `StakingPool`:
	err = decoder.Decode(&obj.StakingPool)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawableTimestamp`:
	err = decoder.Decode(&obj.WithdrawableTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}
