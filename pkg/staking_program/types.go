// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package staking_program

import ag_binary "github.com/gagliardetto/binary"

type ConfigParams struct {
	MinStakeAmount   *uint64          `bin:"optional"`
	RewardRate       *uint64          `bin:"optional"`
	UnbondingSeconds *uint64          `bin:"optional"`
	RewardAlgorithm  *RewardAlgorithm `bin:"optional"`
}

func (obj ConfigParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MinStakeAmount` param (optional):
	{
		if obj.MinStakeAmount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MinStakeAmount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `RewardRate` param (optional):
	{
		if obj.RewardRate == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RewardRate)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `UnbondingSeconds` param (optional):
	{
		if obj.UnbondingSeconds == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UnbondingSeconds)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `RewardAlgorithm` param (optional):
	{
		if obj.RewardAlgorithm == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RewardAlgorithm)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ConfigParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MinStakeAmount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MinStakeAmount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `RewardRate` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RewardRate)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `UnbondingSeconds` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UnbondingSeconds)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `RewardAlgorithm` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RewardAlgorithm)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type InitializeStakingPoolParams struct {
	RewardRate       uint64
	TotalReward      uint64
	UnbondingSeconds uint64
	RewardAlgorithm  RewardAlgorithm
	Index            uint8
}

func (obj InitializeStakingPoolParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardRate` param:
	err = encoder.Encode(obj.RewardRate)
	if err != nil {
		return err
	}
	// Serialize `TotalReward` param:
	err = encoder.Encode(obj.TotalReward)
	if err != nil {
		return err
	}
	// Serialize `UnbondingSeconds` param:
	err = encoder.Encode(obj.UnbondingSeconds)
	if err != nil {
		return err
	}
	// Serialize `RewardAlgorithm` param:
	err = encoder.Encode(obj.RewardAlgorithm)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeStakingPoolParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardRate`:
	err = decoder.Decode(&obj.RewardRate)
	if err != nil {
		return err
	}
	// Deserialize `TotalReward`:
	err = decoder.Decode(&obj.TotalReward)
	if err != nil {
		return err
	}
	// Deserialize `UnbondingSeconds`:
	err = decoder.Decode(&obj.UnbondingSeconds)
	if err != nil {
		return err
	}
	// Deserialize `RewardAlgorithm`:
	err = decoder.Decode(&obj.RewardAlgorithm)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	return nil
}

type RewardAlgorithm ag_binary.BorshEnum

const (
	RewardAlgorithmFixedRate RewardAlgorithm = iota
)

func (value RewardAlgorithm) String() string {
	switch value {
	case RewardAlgorithmFixedRate:
		return "FixedRate"
	default:
		return ""
	}
}
