// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package staking_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AddRewards is the `addRewards` instruction.
type AddRewards struct {
	Amount *uint64

	// [0] = [SIGNER] admin
	//
	// [1] = [WRITE] stakingPool
	//
	// [2] = [WRITE] adminTokenAccount
	//
	// [3] = [WRITE] poolTokenAccount
	//
	// [4] = [] tokenMint
	//
	// [5] = [] tokenProgram
	//
	// [6] = [] associatedTokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddRewardsInstructionBuilder creates a new `AddRewards` instruction builder.
func NewAddRewardsInstructionBuilder() *AddRewards {
	nd := &AddRewards{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *AddRewards) SetAmount(amount uint64) *AddRewards {
	inst.Amount = &amount
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *AddRewards) SetAdminAccount(admin ag_solanago.PublicKey) *AddRewards {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *AddRewards) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStakingPoolAccount sets the "stakingPool" account.
func (inst *AddRewards) SetStakingPoolAccount(stakingPool ag_solanago.PublicKey) *AddRewards {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(stakingPool).WRITE()
	return inst
}

// GetStakingPoolAccount gets the "stakingPool" account.
func (inst *AddRewards) GetStakingPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAdminTokenAccountAccount sets the "adminTokenAccount" account.
func (inst *AddRewards) SetAdminTokenAccountAccount(adminTokenAccount ag_solanago.PublicKey) *AddRewards {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(adminTokenAccount).WRITE()
	return inst
}

// GetAdminTokenAccountAccount gets the "adminTokenAccount" account.
func (inst *AddRewards) GetAdminTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPoolTokenAccountAccount sets the "poolTokenAccount" account.
func (inst *AddRewards) SetPoolTokenAccountAccount(poolTokenAccount ag_solanago.PublicKey) *AddRewards {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(poolTokenAccount).WRITE()
	return inst
}

// GetPoolTokenAccountAccount gets the "poolTokenAccount" account.
func (inst *AddRewards) GetPoolTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenMintAccount sets the "tokenMint" account.
func (inst *AddRewards) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *AddRewards {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenMint)
	return inst
}

// GetTokenMintAccount gets the "tokenMint" account.
func (inst *AddRewards) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *AddRewards) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *AddRewards {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *AddRewards) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *AddRewards) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *AddRewards {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *AddRewards) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst AddRewards) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddRewards,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddRewards) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddRewards) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.StakingPool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AdminTokenAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PoolTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
	}
	return nil
}

func (inst *AddRewards) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddRewards")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           stakingPool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            adminToken", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             poolToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("             tokenMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj AddRewards) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddRewards) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewAddRewardsInstruction declares a new AddRewards instruction with the provided parameters and accounts.
func NewAddRewardsInstruction(
	// Parameters:
	amount uint64,
	// Accounts:
	admin ag_solanago.PublicKey,
	stakingPool ag_solanago.PublicKey,
	adminTokenAccount ag_solanago.PublicKey,
	poolTokenAccount ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey) *AddRewards {
	return NewAddRewardsInstructionBuilder().
		SetAmount(amount).
		SetAdminAccount(admin).
		SetStakingPoolAccount(stakingPool).
		SetAdminTokenAccountAccount(adminTokenAccount).
		SetPoolTokenAccountAccount(poolTokenAccount).
		SetTokenMintAccount(tokenMint).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram)
}
