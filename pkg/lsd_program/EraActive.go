// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lsd_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// EraActive is the `eraActive` instruction.
type EraActive struct {

	// [0] = [WRITE, SIGNER] rentPayer
	//
	// [1] = [WRITE] admin
	//
	// [2] = [WRITE] stakeManager
	//
	// [3] = [WRITE] lsdTokenMint
	//
	// [4] = [] stakingTokenMint
	//
	// [5] = [WRITE] stakeManagerStakingTokenAccount
	//
	// [6] = [WRITE] platformFeeRecipient
	//
	// [7] = [WRITE] stakingPool
	//
	// [8] = [WRITE] stakingPoolStakingTokenAccount
	//
	// [9] = [WRITE] stakingStakeAccount
	//
	// [10] = [] stakingProgram
	//
	// [11] = [] tokenProgram
	//
	// [12] = [] associatedTokenProgram
	//
	// [13] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewEraActiveInstructionBuilder creates a new `EraActive` instruction builder.
func NewEraActiveInstructionBuilder() *EraActive {
	nd := &EraActive{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetRentPayerAccount sets the "rentPayer" account.
func (inst *EraActive) SetRentPayerAccount(rentPayer ag_solanago.PublicKey) *EraActive {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(rentPayer).WRITE().SIGNER()
	return inst
}

// GetRentPayerAccount gets the "rentPayer" account.
func (inst *EraActive) GetRentPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *EraActive) SetAdminAccount(admin ag_solanago.PublicKey) *EraActive {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).WRITE()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *EraActive) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetStakeManagerAccount sets the "stakeManager" account.
func (inst *EraActive) SetStakeManagerAccount(stakeManager ag_solanago.PublicKey) *EraActive {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(stakeManager).WRITE()
	return inst
}

// GetStakeManagerAccount gets the "stakeManager" account.
func (inst *EraActive) GetStakeManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetLsdTokenMintAccount sets the "lsdTokenMint" account.
func (inst *EraActive) SetLsdTokenMintAccount(lsdTokenMint ag_solanago.PublicKey) *EraActive {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(lsdTokenMint).WRITE()
	return inst
}

// GetLsdTokenMintAccount gets the "lsdTokenMint" account.
func (inst *EraActive) GetLsdTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetStakingTokenMintAccount sets the "stakingTokenMint" account.
func (inst *EraActive) SetStakingTokenMintAccount(stakingTokenMint ag_solanago.PublicKey) *EraActive {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(stakingTokenMint)
	return inst
}

// GetStakingTokenMintAccount gets the "stakingTokenMint" account.
func (inst *EraActive) GetStakingTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetStakeManagerStakingTokenAccountAccount sets the "stakeManagerStakingTokenAccount" account.
func (inst *EraActive) SetStakeManagerStakingTokenAccountAccount(stakeManagerStakingTokenAccount ag_solanago.PublicKey) *EraActive {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(stakeManagerStakingTokenAccount).WRITE()
	return inst
}

// GetStakeManagerStakingTokenAccountAccount gets the "stakeManagerStakingTokenAccount" account.
func (inst *EraActive) GetStakeManagerStakingTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPlatformFeeRecipientAccount sets the "platformFeeRecipient" account.
func (inst *EraActive) SetPlatformFeeRecipientAccount(platformFeeRecipient ag_solanago.PublicKey) *EraActive {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(platformFeeRecipient).WRITE()
	return inst
}

// GetPlatformFeeRecipientAccount gets the "platformFeeRecipient" account.
func (inst *EraActive) GetPlatformFeeRecipientAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetStakingPoolAccount sets the "stakingPool" account.
func (inst *EraActive) SetStakingPoolAccount(stakingPool ag_solanago.PublicKey) *EraActive {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(stakingPool).WRITE()
	return inst
}

// GetStakingPoolAccount gets the "stakingPool" account.
func (inst *EraActive) GetStakingPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetStakingPoolStakingTokenAccountAccount sets the "stakingPoolStakingTokenAccount" account.
func (inst *EraActive) SetStakingPoolStakingTokenAccountAccount(stakingPoolStakingTokenAccount ag_solanago.PublicKey) *EraActive {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(stakingPoolStakingTokenAccount).WRITE()
	return inst
}

// GetStakingPoolStakingTokenAccountAccount gets the "stakingPoolStakingTokenAccount" account.
func (inst *EraActive) GetStakingPoolStakingTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetStakingStakeAccountAccount sets the "stakingStakeAccount" account.
func (inst *EraActive) SetStakingStakeAccountAccount(stakingStakeAccount ag_solanago.PublicKey) *EraActive {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(stakingStakeAccount).WRITE()
	return inst
}

// GetStakingStakeAccountAccount gets the "stakingStakeAccount" account.
func (inst *EraActive) GetStakingStakeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetStakingProgramAccount sets the "stakingProgram" account.
func (inst *EraActive) SetStakingProgramAccount(stakingProgram ag_solanago.PublicKey) *EraActive {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(stakingProgram)
	return inst
}

// GetStakingProgramAccount gets the "stakingProgram" account.
func (inst *EraActive) GetStakingProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *EraActive) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *EraActive {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *EraActive) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *EraActive) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *EraActive {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *EraActive) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *EraActive) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *EraActive {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *EraActive) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst EraActive) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_EraActive,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst EraActive) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *EraActive) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.RentPayer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.StakeManager is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.LsdTokenMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.StakingTokenMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.StakeManagerStakingTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PlatformFeeRecipient is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.StakingPool is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.StakingPoolStakingTokenAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.StakingStakeAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.StakingProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *EraActive) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("EraActive")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               rentPayer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                   admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            stakeManager", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            lsdTokenMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        stakingTokenMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("stakeManagerStakingToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    platformFeeRecipient", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("             stakingPool", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta(" stakingPoolStakingToken", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("            stakingStake", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          stakingProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("            tokenProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("  associatedTokenProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("           systemProgram", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj EraActive) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *EraActive) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewEraActiveInstruction declares a new EraActive instruction with the provided parameters and accounts.
func NewEraActiveInstruction(
	// Accounts:
	rentPayer ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	stakeManager ag_solanago.PublicKey,
	lsdTokenMint ag_solanago.PublicKey,
	stakingTokenMint ag_solanago.PublicKey,
	stakeManagerStakingTokenAccount ag_solanago.PublicKey,
	platformFeeRecipient ag_solanago.PublicKey,
	stakingPool ag_solanago.PublicKey,
	stakingPoolStakingTokenAccount ag_solanago.PublicKey,
	stakingStakeAccount ag_solanago.PublicKey,
	stakingProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *EraActive {
	return NewEraActiveInstructionBuilder().
		SetRentPayerAccount(rentPayer).
		SetAdminAccount(admin).
		SetStakeManagerAccount(stakeManager).
		SetLsdTokenMintAccount(lsdTokenMint).
		SetStakingTokenMintAccount(stakingTokenMint).
		SetStakeManagerStakingTokenAccountAccount(stakeManagerStakingTokenAccount).
		SetPlatformFeeRecipientAccount(platformFeeRecipient).
		SetStakingPoolAccount(stakingPool).
		SetStakingPoolStakingTokenAccountAccount(stakingPoolStakingTokenAccount).
		SetStakingStakeAccountAccount(stakingStakeAccount).
		SetStakingProgramAccount(stakingProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram)
}
