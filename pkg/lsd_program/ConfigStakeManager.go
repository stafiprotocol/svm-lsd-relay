// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lsd_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ConfigStakeManager is the `configStakeManager` instruction.
type ConfigStakeManager struct {
	Params *ConfigStakeManagerParams

	// [0] = [SIGNER] admin
	//
	// [1] = [WRITE] stakeManager
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewConfigStakeManagerInstructionBuilder creates a new `ConfigStakeManager` instruction builder.
func NewConfigStakeManagerInstructionBuilder() *ConfigStakeManager {
	nd := &ConfigStakeManager{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *ConfigStakeManager) SetParams(params ConfigStakeManagerParams) *ConfigStakeManager {
	inst.Params = &params
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *ConfigStakeManager) SetAdminAccount(admin ag_solanago.PublicKey) *ConfigStakeManager {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *ConfigStakeManager) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStakeManagerAccount sets the "stakeManager" account.
func (inst *ConfigStakeManager) SetStakeManagerAccount(stakeManager ag_solanago.PublicKey) *ConfigStakeManager {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(stakeManager).WRITE()
	return inst
}

// GetStakeManagerAccount gets the "stakeManager" account.
func (inst *ConfigStakeManager) GetStakeManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst ConfigStakeManager) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ConfigStakeManager,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ConfigStakeManager) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ConfigStakeManager) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.StakeManager is not set")
		}
	}
	return nil
}

func (inst *ConfigStakeManager) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ConfigStakeManager")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("stakeManager", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj ConfigStakeManager) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ConfigStakeManager) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewConfigStakeManagerInstruction declares a new ConfigStakeManager instruction with the provided parameters and accounts.
func NewConfigStakeManagerInstruction(
	// Parameters:
	params ConfigStakeManagerParams,
	// Accounts:
	admin ag_solanago.PublicKey,
	stakeManager ag_solanago.PublicKey) *ConfigStakeManager {
	return NewConfigStakeManagerInstructionBuilder().
		SetParams(params).
		SetAdminAccount(admin).
		SetStakeManagerAccount(stakeManager)
}
