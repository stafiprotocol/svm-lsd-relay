// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lsd_program

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type StakeManager struct {
	Creator               ag_solanago.PublicKey
	Index                 uint8
	Admin                 ag_solanago.PublicKey
	PendingAdmin          ag_solanago.PublicKey
	PoolSeedBump          uint8
	LsdTokenMint          ag_solanago.PublicKey
	StakingProgram        ag_solanago.PublicKey
	StakingTokenMint      ag_solanago.PublicKey
	StakingPool           ag_solanago.PublicKey
	StakingMinStakeAmount uint64
	EraSeconds            int64
	EraOffset             int64
	MinStakeAmount        uint64
	PlatformFeeCommission uint64
	RateChangeLimit       uint64
	UnbondingDuration     uint64
	EraStatus             EraStatus
	LatestEra             uint64
	Rate                  uint64
	EraBond               uint64
	EraUnbond             uint64
	PendingBond           uint64
	PendingUnbond         uint64
	Active                uint64
	TotalPlatformFee      uint64
	EraRates              []EraRate

	// Reserved space for future upgrades. Do not use.
	Reserved [256]uint8
}

var StakeManagerDiscriminator = [8]byte{205, 143, 54, 235, 240, 28, 104, 211}

func (obj StakeManager) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StakeManagerDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `PendingAdmin` param:
	err = encoder.Encode(obj.PendingAdmin)
	if err != nil {
		return err
	}
	// Serialize `PoolSeedBump` param:
	err = encoder.Encode(obj.PoolSeedBump)
	if err != nil {
		return err
	}
	// Serialize `LsdTokenMint` param:
	err = encoder.Encode(obj.LsdTokenMint)
	if err != nil {
		return err
	}
	// Serialize `StakingProgram` param:
	err = encoder.Encode(obj.StakingProgram)
	if err != nil {
		return err
	}
	// Serialize `StakingTokenMint` param:
	err = encoder.Encode(obj.StakingTokenMint)
	if err != nil {
		return err
	}
	// Serialize `StakingPool` param:
	err = encoder.Encode(obj.StakingPool)
	if err != nil {
		return err
	}
	// Serialize `StakingMinStakeAmount` param:
	err = encoder.Encode(obj.StakingMinStakeAmount)
	if err != nil {
		return err
	}
	// Serialize `EraSeconds` param:
	err = encoder.Encode(obj.EraSeconds)
	if err != nil {
		return err
	}
	// Serialize `EraOffset` param:
	err = encoder.Encode(obj.EraOffset)
	if err != nil {
		return err
	}
	// Serialize `MinStakeAmount` param:
	err = encoder.Encode(obj.MinStakeAmount)
	if err != nil {
		return err
	}
	// Serialize `PlatformFeeCommission` param:
	err = encoder.Encode(obj.PlatformFeeCommission)
	if err != nil {
		return err
	}
	// Serialize `RateChangeLimit` param:
	err = encoder.Encode(obj.RateChangeLimit)
	if err != nil {
		return err
	}
	// Serialize `UnbondingDuration` param:
	err = encoder.Encode(obj.UnbondingDuration)
	if err != nil {
		return err
	}
	// Serialize `EraStatus` param:
	err = encoder.Encode(obj.EraStatus)
	if err != nil {
		return err
	}
	// Serialize `LatestEra` param:
	err = encoder.Encode(obj.LatestEra)
	if err != nil {
		return err
	}
	// Serialize `Rate` param:
	err = encoder.Encode(obj.Rate)
	if err != nil {
		return err
	}
	// Serialize `EraBond` param:
	err = encoder.Encode(obj.EraBond)
	if err != nil {
		return err
	}
	// Serialize `EraUnbond` param:
	err = encoder.Encode(obj.EraUnbond)
	if err != nil {
		return err
	}
	// Serialize `PendingBond` param:
	err = encoder.Encode(obj.PendingBond)
	if err != nil {
		return err
	}
	// Serialize `PendingUnbond` param:
	err = encoder.Encode(obj.PendingUnbond)
	if err != nil {
		return err
	}
	// Serialize `Active` param:
	err = encoder.Encode(obj.Active)
	if err != nil {
		return err
	}
	// Serialize `TotalPlatformFee` param:
	err = encoder.Encode(obj.TotalPlatformFee)
	if err != nil {
		return err
	}
	// Serialize `EraRates` param:
	err = encoder.Encode(obj.EraRates)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StakeManager) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StakeManagerDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[205 143 54 235 240 28 104 211]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `PendingAdmin`:
	err = decoder.Decode(&obj.PendingAdmin)
	if err != nil {
		return err
	}
	// Deserialize `PoolSeedBump`:
	err = decoder.Decode(&obj.PoolSeedBump)
	if err != nil {
		return err
	}
	// Deserialize `LsdTokenMint`:
	err = decoder.Decode(&obj.LsdTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `StakingProgram`:
	err = decoder.Decode(&obj.StakingProgram)
	if err != nil {
		return err
	}
	// Deserialize `StakingTokenMint`:
	err = decoder.Decode(&obj.StakingTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `StakingPool`:
	err = decoder.Decode(&obj.StakingPool)
	if err != nil {
		return err
	}
	// Deserialize `StakingMinStakeAmount`:
	err = decoder.Decode(&obj.StakingMinStakeAmount)
	if err != nil {
		return err
	}
	// Deserialize `EraSeconds`:
	err = decoder.Decode(&obj.EraSeconds)
	if err != nil {
		return err
	}
	// Deserialize `EraOffset`:
	err = decoder.Decode(&obj.EraOffset)
	if err != nil {
		return err
	}
	// Deserialize `MinStakeAmount`:
	err = decoder.Decode(&obj.MinStakeAmount)
	if err != nil {
		return err
	}
	// Deserialize `PlatformFeeCommission`:
	err = decoder.Decode(&obj.PlatformFeeCommission)
	if err != nil {
		return err
	}
	// Deserialize `RateChangeLimit`:
	err = decoder.Decode(&obj.RateChangeLimit)
	if err != nil {
		return err
	}
	// Deserialize `UnbondingDuration`:
	err = decoder.Decode(&obj.UnbondingDuration)
	if err != nil {
		return err
	}
	// Deserialize `EraStatus`:
	err = decoder.Decode(&obj.EraStatus)
	if err != nil {
		return err
	}
	// Deserialize `LatestEra`:
	err = decoder.Decode(&obj.LatestEra)
	if err != nil {
		return err
	}
	// Deserialize `Rate`:
	err = decoder.Decode(&obj.Rate)
	if err != nil {
		return err
	}
	// Deserialize `EraBond`:
	err = decoder.Decode(&obj.EraBond)
	if err != nil {
		return err
	}
	// Deserialize `EraUnbond`:
	err = decoder.Decode(&obj.EraUnbond)
	if err != nil {
		return err
	}
	// Deserialize `PendingBond`:
	err = decoder.Decode(&obj.PendingBond)
	if err != nil {
		return err
	}
	// Deserialize `PendingUnbond`:
	err = decoder.Decode(&obj.PendingUnbond)
	if err != nil {
		return err
	}
	// Deserialize `Active`:
	err = decoder.Decode(&obj.Active)
	if err != nil {
		return err
	}
	// Deserialize `TotalPlatformFee`:
	err = decoder.Decode(&obj.TotalPlatformFee)
	if err != nil {
		return err
	}
	// Deserialize `EraRates`:
	err = decoder.Decode(&obj.EraRates)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type UnstakeAccount struct {
	StakeManager    ag_solanago.PublicKey
	User            ag_solanago.PublicKey
	Amount          uint64
	WithdrawableEra uint64

	// Reserved space for future upgrades. Do not use.
	Reserved [128]uint8
}

var UnstakeAccountDiscriminator = [8]byte{45, 203, 242, 225, 172, 87, 112, 71}

func (obj UnstakeAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UnstakeAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `StakeManager` param:
	err = encoder.Encode(obj.StakeManager)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `WithdrawableEra` param:
	err = encoder.Encode(obj.WithdrawableEra)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnstakeAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UnstakeAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[45 203 242 225 172 87 112 71]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `StakeManager`:
	err = decoder.Decode(&obj.StakeManager)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawableEra`:
	err = decoder.Decode(&obj.WithdrawableEra)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}
