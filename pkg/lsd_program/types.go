// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lsd_program

import ag_binary "github.com/gagliardetto/binary"

type ConfigStakeManagerParams struct {
	MinStakeAmount        *uint64 `bin:"optional"`
	PlatformFeeCommission *uint64 `bin:"optional"`
	RateChangeLimit       *uint64 `bin:"optional"`
}

func (obj ConfigStakeManagerParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MinStakeAmount` param (optional):
	{
		if obj.MinStakeAmount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MinStakeAmount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `PlatformFeeCommission` param (optional):
	{
		if obj.PlatformFeeCommission == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PlatformFeeCommission)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `RateChangeLimit` param (optional):
	{
		if obj.RateChangeLimit == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RateChangeLimit)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ConfigStakeManagerParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MinStakeAmount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MinStakeAmount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `PlatformFeeCommission` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PlatformFeeCommission)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `RateChangeLimit` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RateChangeLimit)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type InitializeStakeManagerParams struct {
	EraSeconds int64
	Index      uint8
}

func (obj InitializeStakeManagerParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EraSeconds` param:
	err = encoder.Encode(obj.EraSeconds)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeStakeManagerParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EraSeconds`:
	err = decoder.Decode(&obj.EraSeconds)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	return nil
}

type CreateMetadataParams struct {
	TokenName   string
	TokenSymbol string
	TokenUri    string
}

func (obj CreateMetadataParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenName` param:
	err = encoder.Encode(obj.TokenName)
	if err != nil {
		return err
	}
	// Serialize `TokenSymbol` param:
	err = encoder.Encode(obj.TokenSymbol)
	if err != nil {
		return err
	}
	// Serialize `TokenUri` param:
	err = encoder.Encode(obj.TokenUri)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateMetadataParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenName`:
	err = decoder.Decode(&obj.TokenName)
	if err != nil {
		return err
	}
	// Deserialize `TokenSymbol`:
	err = decoder.Decode(&obj.TokenSymbol)
	if err != nil {
		return err
	}
	// Deserialize `TokenUri`:
	err = decoder.Decode(&obj.TokenUri)
	if err != nil {
		return err
	}
	return nil
}

type EraRate struct {
	Era  uint64
	Rate uint64
}

func (obj EraRate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Era` param:
	err = encoder.Encode(obj.Era)
	if err != nil {
		return err
	}
	// Serialize `Rate` param:
	err = encoder.Encode(obj.Rate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EraRate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Era`:
	err = decoder.Decode(&obj.Era)
	if err != nil {
		return err
	}
	// Deserialize `Rate`:
	err = decoder.Decode(&obj.Rate)
	if err != nil {
		return err
	}
	return nil
}

type EraStatus ag_binary.BorshEnum

const (
	EraStatusEraUpdated EraStatus = iota
	EraStatusBonded
	EraStatusUnbonded
	EraStatusActiveUpdated
)

func (value EraStatus) String() string {
	switch value {
	case EraStatusEraUpdated:
		return "EraUpdated"
	case EraStatusBonded:
		return "Bonded"
	case EraStatusUnbonded:
		return "Unbonded"
	case EraStatusActiveUpdated:
		return "ActiveUpdated"
	default:
		return ""
	}
}
