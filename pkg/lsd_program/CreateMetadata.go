// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lsd_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateMetadata is the `createMetadata` instruction.
type CreateMetadata struct {
	Params *CreateMetadataParams

	// [0] = [WRITE, SIGNER] feeAndRentPayer
	//
	// [1] = [SIGNER] admin
	//
	// [2] = [WRITE] stakeManager
	//
	// [3] = [WRITE] lsdTokenMint
	//
	// [4] = [WRITE] metadataAccount
	//
	// [5] = [] tokenProgram
	//
	// [6] = [] metadataProgram
	//
	// [7] = [] systemProgram
	//
	// [8] = [] sysvarInstruction
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateMetadataInstructionBuilder creates a new `CreateMetadata` instruction builder.
func NewCreateMetadataInstructionBuilder() *CreateMetadata {
	nd := &CreateMetadata{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *CreateMetadata) SetParams(params CreateMetadataParams) *CreateMetadata {
	inst.Params = &params
	return inst
}

// SetFeeAndRentPayerAccount sets the "feeAndRentPayer" account.
func (inst *CreateMetadata) SetFeeAndRentPayerAccount(feeAndRentPayer ag_solanago.PublicKey) *CreateMetadata {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(feeAndRentPayer).WRITE().SIGNER()
	return inst
}

// GetFeeAndRentPayerAccount gets the "feeAndRentPayer" account.
func (inst *CreateMetadata) GetFeeAndRentPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *CreateMetadata) SetAdminAccount(admin ag_solanago.PublicKey) *CreateMetadata {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *CreateMetadata) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetStakeManagerAccount sets the "stakeManager" account.
func (inst *CreateMetadata) SetStakeManagerAccount(stakeManager ag_solanago.PublicKey) *CreateMetadata {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(stakeManager).WRITE()
	return inst
}

// GetStakeManagerAccount gets the "stakeManager" account.
func (inst *CreateMetadata) GetStakeManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetLsdTokenMintAccount sets the "lsdTokenMint" account.
func (inst *CreateMetadata) SetLsdTokenMintAccount(lsdTokenMint ag_solanago.PublicKey) *CreateMetadata {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(lsdTokenMint).WRITE()
	return inst
}

// GetLsdTokenMintAccount gets the "lsdTokenMint" account.
func (inst *CreateMetadata) GetLsdTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMetadataAccountAccount sets the "metadataAccount" account.
func (inst *CreateMetadata) SetMetadataAccountAccount(metadataAccount ag_solanago.PublicKey) *CreateMetadata {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(metadataAccount).WRITE()
	return inst
}

// GetMetadataAccountAccount gets the "metadataAccount" account.
func (inst *CreateMetadata) GetMetadataAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CreateMetadata) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreateMetadata {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CreateMetadata) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMetadataProgramAccount sets the "metadataProgram" account.
func (inst *CreateMetadata) SetMetadataProgramAccount(metadataProgram ag_solanago.PublicKey) *CreateMetadata {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(metadataProgram)
	return inst
}

// GetMetadataProgramAccount gets the "metadataProgram" account.
func (inst *CreateMetadata) GetMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateMetadata) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateMetadata {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateMetadata) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSysvarInstructionAccount sets the "sysvarInstruction" account.
func (inst *CreateMetadata) SetSysvarInstructionAccount(sysvarInstruction ag_solanago.PublicKey) *CreateMetadata {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(sysvarInstruction)
	return inst
}

// GetSysvarInstructionAccount gets the "sysvarInstruction" account.
func (inst *CreateMetadata) GetSysvarInstructionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst CreateMetadata) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateMetadata,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateMetadata) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateMetadata) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.FeeAndRentPayer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.StakeManager is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.LsdTokenMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MetadataAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.MetadataProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SysvarInstruction is not set")
		}
	}
	return nil
}

func (inst *CreateMetadata) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateMetadata")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  feeAndRentPayer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     stakeManager", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     lsdTokenMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         metadata", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     tokenProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("  metadataProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("    systemProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("sysvarInstruction", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj CreateMetadata) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateMetadata) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateMetadataInstruction declares a new CreateMetadata instruction with the provided parameters and accounts.
func NewCreateMetadataInstruction(
	// Parameters:
	params CreateMetadataParams,
	// Accounts:
	feeAndRentPayer ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	stakeManager ag_solanago.PublicKey,
	lsdTokenMint ag_solanago.PublicKey,
	metadataAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	metadataProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	sysvarInstruction ag_solanago.PublicKey) *CreateMetadata {
	return NewCreateMetadataInstructionBuilder().
		SetParams(params).
		SetFeeAndRentPayerAccount(feeAndRentPayer).
		SetAdminAccount(admin).
		SetStakeManagerAccount(stakeManager).
		SetLsdTokenMintAccount(lsdTokenMint).
		SetMetadataAccountAccount(metadataAccount).
		SetTokenProgramAccount(tokenProgram).
		SetMetadataProgramAccount(metadataProgram).
		SetSystemProgramAccount(systemProgram).
		SetSysvarInstructionAccount(sysvarInstruction)
}
