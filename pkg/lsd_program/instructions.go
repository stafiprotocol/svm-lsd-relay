// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lsd_program

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "LsdProgram"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_InitializeStakeManager = ag_binary.TypeID([8]byte{75, 220, 4, 110, 166, 194, 173, 1})

	Instruction_TransferStakeManagerAdmin = ag_binary.TypeID([8]byte{225, 28, 79, 223, 28, 96, 210, 226})

	Instruction_AcceptStakeManagerAdmin = ag_binary.TypeID([8]byte{50, 196, 85, 0, 68, 81, 162, 157})

	Instruction_ConfigStakeManager = ag_binary.TypeID([8]byte{73, 29, 253, 251, 149, 25, 90, 112})

	Instruction_CreateMetadata = ag_binary.TypeID([8]byte{30, 35, 117, 134, 196, 139, 44, 25})

	Instruction_Stake = ag_binary.TypeID([8]byte{206, 176, 202, 18, 200, 209, 179, 108})

	Instruction_Unstake = ag_binary.TypeID([8]byte{90, 95, 107, 42, 205, 124, 50, 225})

	Instruction_Withdraw = ag_binary.TypeID([8]byte{183, 18, 70, 156, 148, 109, 161, 34})

	Instruction_EraNew = ag_binary.TypeID([8]byte{96, 178, 91, 52, 66, 223, 134, 98})

	Instruction_EraBond = ag_binary.TypeID([8]byte{44, 238, 86, 188, 197, 69, 241, 91})

	Instruction_EraUnbond = ag_binary.TypeID([8]byte{193, 62, 151, 104, 91, 68, 92, 148})

	Instruction_EraWithdraw = ag_binary.TypeID([8]byte{92, 3, 86, 172, 211, 111, 176, 238})

	Instruction_EraActive = ag_binary.TypeID([8]byte{221, 180, 5, 245, 14, 93, 183, 124})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_InitializeStakeManager:
		return "InitializeStakeManager"
	case Instruction_TransferStakeManagerAdmin:
		return "TransferStakeManagerAdmin"
	case Instruction_AcceptStakeManagerAdmin:
		return "AcceptStakeManagerAdmin"
	case Instruction_ConfigStakeManager:
		return "ConfigStakeManager"
	case Instruction_CreateMetadata:
		return "CreateMetadata"
	case Instruction_Stake:
		return "Stake"
	case Instruction_Unstake:
		return "Unstake"
	case Instruction_Withdraw:
		return "Withdraw"
	case Instruction_EraNew:
		return "EraNew"
	case Instruction_EraBond:
		return "EraBond"
	case Instruction_EraUnbond:
		return "EraUnbond"
	case Instruction_EraWithdraw:
		return "EraWithdraw"
	case Instruction_EraActive:
		return "EraActive"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"initialize_stake_manager", (*InitializeStakeManager)(nil),
		},
		{
			"transfer_stake_manager_admin", (*TransferStakeManagerAdmin)(nil),
		},
		{
			"accept_stake_manager_admin", (*AcceptStakeManagerAdmin)(nil),
		},
		{
			"config_stake_manager", (*ConfigStakeManager)(nil),
		},
		{
			"create_metadata", (*CreateMetadata)(nil),
		},
		{
			"stake", (*Stake)(nil),
		},
		{
			"unstake", (*Unstake)(nil),
		},
		{
			"withdraw", (*Withdraw)(nil),
		},
		{
			"era_new", (*EraNew)(nil),
		},
		{
			"era_bond", (*EraBond)(nil),
		},
		{
			"era_unbond", (*EraUnbond)(nil),
		},
		{
			"era_withdraw", (*EraWithdraw)(nil),
		},
		{
			"era_active", (*EraActive)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
