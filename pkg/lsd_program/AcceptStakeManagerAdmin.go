// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lsd_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AcceptStakeManagerAdmin is the `acceptStakeManagerAdmin` instruction.
type AcceptStakeManagerAdmin struct {

	// [0] = [SIGNER] pendingAdmin
	//
	// [1] = [WRITE] stakeManager
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAcceptStakeManagerAdminInstructionBuilder creates a new `AcceptStakeManagerAdmin` instruction builder.
func NewAcceptStakeManagerAdminInstructionBuilder() *AcceptStakeManagerAdmin {
	nd := &AcceptStakeManagerAdmin{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetPendingAdminAccount sets the "pendingAdmin" account.
func (inst *AcceptStakeManagerAdmin) SetPendingAdminAccount(pendingAdmin ag_solanago.PublicKey) *AcceptStakeManagerAdmin {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pendingAdmin).SIGNER()
	return inst
}

// GetPendingAdminAccount gets the "pendingAdmin" account.
func (inst *AcceptStakeManagerAdmin) GetPendingAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStakeManagerAccount sets the "stakeManager" account.
func (inst *AcceptStakeManagerAdmin) SetStakeManagerAccount(stakeManager ag_solanago.PublicKey) *AcceptStakeManagerAdmin {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(stakeManager).WRITE()
	return inst
}

// GetStakeManagerAccount gets the "stakeManager" account.
func (inst *AcceptStakeManagerAdmin) GetStakeManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst AcceptStakeManagerAdmin) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AcceptStakeManagerAdmin,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AcceptStakeManagerAdmin) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AcceptStakeManagerAdmin) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PendingAdmin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.StakeManager is not set")
		}
	}
	return nil
}

func (inst *AcceptStakeManagerAdmin) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AcceptStakeManagerAdmin")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("pendingAdmin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("stakeManager", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj AcceptStakeManagerAdmin) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *AcceptStakeManagerAdmin) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewAcceptStakeManagerAdminInstruction declares a new AcceptStakeManagerAdmin instruction with the provided parameters and accounts.
func NewAcceptStakeManagerAdminInstruction(
	// Accounts:
	pendingAdmin ag_solanago.PublicKey,
	stakeManager ag_solanago.PublicKey) *AcceptStakeManagerAdmin {
	return NewAcceptStakeManagerAdminInstructionBuilder().
		SetPendingAdminAccount(pendingAdmin).
		SetStakeManagerAccount(stakeManager)
}
