// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lsd_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// EraUnbond is the `eraUnbond` instruction.
type EraUnbond struct {

	// [0] = [WRITE, SIGNER] feeAndRentPayer
	//
	// [1] = [WRITE] stakeManager
	//
	// [2] = [WRITE] stakingPool
	//
	// [3] = [WRITE] stakingStakeAccount
	//
	// [4] = [WRITE, SIGNER] stakingUnstakeAccount
	//
	// [5] = [] stakingProgram
	//
	// [6] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewEraUnbondInstructionBuilder creates a new `EraUnbond` instruction builder.
func NewEraUnbondInstructionBuilder() *EraUnbond {
	nd := &EraUnbond{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetFeeAndRentPayerAccount sets the "feeAndRentPayer" account.
func (inst *EraUnbond) SetFeeAndRentPayerAccount(feeAndRentPayer ag_solanago.PublicKey) *EraUnbond {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(feeAndRentPayer).WRITE().SIGNER()
	return inst
}

// GetFeeAndRentPayerAccount gets the "feeAndRentPayer" account.
func (inst *EraUnbond) GetFeeAndRentPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStakeManagerAccount sets the "stakeManager" account.
func (inst *EraUnbond) SetStakeManagerAccount(stakeManager ag_solanago.PublicKey) *EraUnbond {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(stakeManager).WRITE()
	return inst
}

// GetStakeManagerAccount gets the "stakeManager" account.
func (inst *EraUnbond) GetStakeManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetStakingPoolAccount sets the "stakingPool" account.
func (inst *EraUnbond) SetStakingPoolAccount(stakingPool ag_solanago.PublicKey) *EraUnbond {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(stakingPool).WRITE()
	return inst
}

// GetStakingPoolAccount gets the "stakingPool" account.
func (inst *EraUnbond) GetStakingPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetStakingStakeAccountAccount sets the "stakingStakeAccount" account.
func (inst *EraUnbond) SetStakingStakeAccountAccount(stakingStakeAccount ag_solanago.PublicKey) *EraUnbond {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(stakingStakeAccount).WRITE()
	return inst
}

// GetStakingStakeAccountAccount gets the "stakingStakeAccount" account.
func (inst *EraUnbond) GetStakingStakeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetStakingUnstakeAccountAccount sets the "stakingUnstakeAccount" account.
func (inst *EraUnbond) SetStakingUnstakeAccountAccount(stakingUnstakeAccount ag_solanago.PublicKey) *EraUnbond {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(stakingUnstakeAccount).WRITE().SIGNER()
	return inst
}

// GetStakingUnstakeAccountAccount gets the "stakingUnstakeAccount" account.
func (inst *EraUnbond) GetStakingUnstakeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetStakingProgramAccount sets the "stakingProgram" account.
func (inst *EraUnbond) SetStakingProgramAccount(stakingProgram ag_solanago.PublicKey) *EraUnbond {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(stakingProgram)
	return inst
}

// GetStakingProgramAccount gets the "stakingProgram" account.
func (inst *EraUnbond) GetStakingProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *EraUnbond) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *EraUnbond {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *EraUnbond) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst EraUnbond) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_EraUnbond,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst EraUnbond) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *EraUnbond) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.FeeAndRentPayer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.StakeManager is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.StakingPool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.StakingStakeAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.StakingUnstakeAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.StakingProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *EraUnbond) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("EraUnbond")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("feeAndRentPayer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   stakeManager", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    stakingPool", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   stakingStake", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" stakingUnstake", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" stakingProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("  systemProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj EraUnbond) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *EraUnbond) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewEraUnbondInstruction declares a new EraUnbond instruction with the provided parameters and accounts.
func NewEraUnbondInstruction(
	// Accounts:
	feeAndRentPayer ag_solanago.PublicKey,
	stakeManager ag_solanago.PublicKey,
	stakingPool ag_solanago.PublicKey,
	stakingStakeAccount ag_solanago.PublicKey,
	stakingUnstakeAccount ag_solanago.PublicKey,
	stakingProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *EraUnbond {
	return NewEraUnbondInstructionBuilder().
		SetFeeAndRentPayerAccount(feeAndRentPayer).
		SetStakeManagerAccount(stakeManager).
		SetStakingPoolAccount(stakingPool).
		SetStakingStakeAccountAccount(stakingStakeAccount).
		SetStakingUnstakeAccountAccount(stakingUnstakeAccount).
		SetStakingProgramAccount(stakingProgram).
		SetSystemProgramAccount(systemProgram)
}
