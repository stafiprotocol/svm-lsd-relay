// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lsd_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeStakeManager is the `initializeStakeManager` instruction.
type InitializeStakeManager struct {
	Params *InitializeStakeManagerParams

	// [0] = [SIGNER] admin
	//
	// [1] = [WRITE, SIGNER] rentPayer
	//
	// [2] = [WRITE] stakeManager
	//
	// [3] = [] stakingPool
	//
	// [4] = [WRITE] lsdTokenMint
	//
	// [5] = [] stakingTokenMint
	//
	// [6] = [WRITE] stakeManagerStakingTokenAccount
	//
	// [7] = [] tokenProgram
	//
	// [8] = [] associatedTokenProgram
	//
	// [9] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeStakeManagerInstructionBuilder creates a new `InitializeStakeManager` instruction builder.
func NewInitializeStakeManagerInstructionBuilder() *InitializeStakeManager {
	nd := &InitializeStakeManager{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *InitializeStakeManager) SetParams(params InitializeStakeManagerParams) *InitializeStakeManager {
	inst.Params = &params
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *InitializeStakeManager) SetAdminAccount(admin ag_solanago.PublicKey) *InitializeStakeManager {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *InitializeStakeManager) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRentPayerAccount sets the "rentPayer" account.
func (inst *InitializeStakeManager) SetRentPayerAccount(rentPayer ag_solanago.PublicKey) *InitializeStakeManager {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(rentPayer).WRITE().SIGNER()
	return inst
}

// GetRentPayerAccount gets the "rentPayer" account.
func (inst *InitializeStakeManager) GetRentPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetStakeManagerAccount sets the "stakeManager" account.
func (inst *InitializeStakeManager) SetStakeManagerAccount(stakeManager ag_solanago.PublicKey) *InitializeStakeManager {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(stakeManager).WRITE()
	return inst
}

// GetStakeManagerAccount gets the "stakeManager" account.
func (inst *InitializeStakeManager) GetStakeManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetStakingPoolAccount sets the "stakingPool" account.
func (inst *InitializeStakeManager) SetStakingPoolAccount(stakingPool ag_solanago.PublicKey) *InitializeStakeManager {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(stakingPool)
	return inst
}

// GetStakingPoolAccount gets the "stakingPool" account.
func (inst *InitializeStakeManager) GetStakingPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetLsdTokenMintAccount sets the "lsdTokenMint" account.
func (inst *InitializeStakeManager) SetLsdTokenMintAccount(lsdTokenMint ag_solanago.PublicKey) *InitializeStakeManager {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(lsdTokenMint).WRITE()
	return inst
}

// GetLsdTokenMintAccount gets the "lsdTokenMint" account.
func (inst *InitializeStakeManager) GetLsdTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetStakingTokenMintAccount sets the "stakingTokenMint" account.
func (inst *InitializeStakeManager) SetStakingTokenMintAccount(stakingTokenMint ag_solanago.PublicKey) *InitializeStakeManager {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(stakingTokenMint)
	return inst
}

// GetStakingTokenMintAccount gets the "stakingTokenMint" account.
func (inst *InitializeStakeManager) GetStakingTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetStakeManagerStakingTokenAccountAccount sets the "stakeManagerStakingTokenAccount" account.
func (inst *InitializeStakeManager) SetStakeManagerStakingTokenAccountAccount(stakeManagerStakingTokenAccount ag_solanago.PublicKey) *InitializeStakeManager {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(stakeManagerStakingTokenAccount).WRITE()
	return inst
}

// GetStakeManagerStakingTokenAccountAccount gets the "stakeManagerStakingTokenAccount" account.
func (inst *InitializeStakeManager) GetStakeManagerStakingTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *InitializeStakeManager) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InitializeStakeManager {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *InitializeStakeManager) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *InitializeStakeManager) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *InitializeStakeManager {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *InitializeStakeManager) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeStakeManager) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeStakeManager {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeStakeManager) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst InitializeStakeManager) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeStakeManager,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeStakeManager) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeStakeManager) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.RentPayer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.StakeManager is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.StakingPool is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.LsdTokenMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.StakingTokenMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.StakeManagerStakingTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitializeStakeManager) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeStakeManager")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               rentPayer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            stakeManager", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             stakingPool", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("            lsdTokenMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        stakingTokenMint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("stakeManagerStakingToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            tokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("  associatedTokenProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           systemProgram", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj InitializeStakeManager) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeStakeManager) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeStakeManagerInstruction declares a new InitializeStakeManager instruction with the provided parameters and accounts.
func NewInitializeStakeManagerInstruction(
	// Parameters:
	params InitializeStakeManagerParams,
	// Accounts:
	admin ag_solanago.PublicKey,
	rentPayer ag_solanago.PublicKey,
	stakeManager ag_solanago.PublicKey,
	stakingPool ag_solanago.PublicKey,
	lsdTokenMint ag_solanago.PublicKey,
	stakingTokenMint ag_solanago.PublicKey,
	stakeManagerStakingTokenAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeStakeManager {
	return NewInitializeStakeManagerInstructionBuilder().
		SetParams(params).
		SetAdminAccount(admin).
		SetRentPayerAccount(rentPayer).
		SetStakeManagerAccount(stakeManager).
		SetStakingPoolAccount(stakingPool).
		SetLsdTokenMintAccount(lsdTokenMint).
		SetStakingTokenMintAccount(stakingTokenMint).
		SetStakeManagerStakingTokenAccountAccount(stakeManagerStakingTokenAccount).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram)
}
